import * as model from './model.js';
import recipeView from './views/recipeView.js';

// IMPORTANT
// Add Polyfills for ES6 features via command line:
// npm i core-js regenerator-runtime // install
import 'core-js/stable';
import 'regenerator-runtime';

const recipeContainer = document.querySelector('.recipe');

const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
};

/////////////////////////////////////////////////////////////////
// Loading a Recipe from API
/////////////////////////////////////////////////////////////////

// Jonas' API - Review documentation:
// URL https://forkify-api.herokuapp.com/v2

const controlRecipes = async function () {
  // using async function for non-blocking code execution
  try {
    const id = window.location.hash;

    if (!id) return; // guard clause
    recipeView.renderSpinner();

    // 1. LOAD RECIPE
    await model.loadRecipe(id); // as this is an async function, it will return a promise.

    // 2. RENDER RECIPE
    recipeView.render(model.state.recipe);
  } catch (err) {
    console.error(err.message);
  }
};
// controlRecipes();

/////////////////////////////////////////////////////////////////
// Event Listeners
/////////////////////////////////////////////////////////////////

// Change of Hash ID in the url & New page load events
['hashchange', 'load'].forEach((event) =>
  window.addEventListener(event, controlRecipes)
);

/////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////

//

/////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////

//

/////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////

//

/////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////

//

/////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////

//
